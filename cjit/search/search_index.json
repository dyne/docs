{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CJIT Manual","text":"<p>CJIT is a versatile C interpreter based on TinyCC, designed to compile C code in-memory and execute it live. This manual serves as a guide to the full potential of CJIT, empowering you to efficiently develop and test C programs in real-time.</p> <p>CJIT is distributed as a small, all-in-one executable, ensuring a lightweight and portable solution for your coding needs. One of its standout features is the ability to call functions from any installed library, making it a robust tool for rapid prototyping and dynamic code execution on Linux, Windows, and macOS. \ud83d\udda5\ufe0f</p> <p>The following sections will guide you through practical usage examples, helping you to swiftly integrate CJIT into your workflow. \ud83d\udcda\ud83d\udd27</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>This classic example will make you create a <code>hello.c</code> file and execute it with CJIT to print the string \"Hello World!\" in the terminal.</p> <p>Please chose the right example code using tabs: MS/Windows, Apple/OSX or GNU/Linux</p> <p>Info</p> <p>All Windows based examples are made for the PowerShell terminal, if you are on WSL then chose GNU/Linux</p> <p>Download CJIT pasting a command in the terminal</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Uri \"https://github.com/dyne/cjit/releases/latest/download/cjit.exe\" -OutFile \"cjit.exe\"\n</code></pre> <pre><code>curl -sLo cjit https://github.com/dyne/cjit/releases/latest/download/cjit-$(uname)-$(uname -m)\n</code></pre> <pre><code>curl -sLo cjit https://github.com/dyne/cjit/releases/latest/download/cjit-$(uname)-$(uname -m)\n</code></pre> <p>Then create hello.c by pasting these lines in the terminal:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>@\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\n\"@| Out-File -FilePath \"hello.c\"\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; hello.c\n#!/usr/bin/env cjit\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\nEOF\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; hello.c\n#!/usr/bin/env cjit\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\nEOF\n</code></pre> <p>Finally execute hello.c using CJIT with:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe .\\hello.c\n</code></pre> <pre><code>./cjit hello.c\n</code></pre> <pre><code>./cjit hello.c\n</code></pre> <p>As a result you will see CJIT starting and printing \"Hello World!\"</p> <pre><code>CJIT v0.8.7 by Dyne.org\ninc: C:\\Users\\utente\\AppData\\Local\\Temp\\CJIT-v0.8.7\nlib paths: C:\\Users\\utente\\AppData\\Local\\Temp\\CJIT-v0.8.7\nSource code:\n+ .\\hello.c\nExecution start\n---\nHello, World!\n</code></pre> <p>You can now play with <code>hello.c</code>, change what you want and run it again!</p>"},{"location":"#flying-donuts","title":"Flying Donuts","text":"<p>This example will print an animated donut on the terminal!</p> <p>Create the <code>donut.c</code> file using the artful code below:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>@\"\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\n\"@| Out-File -FilePath \"donut.c\"\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; donut.c\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\nEOF\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; donut.c\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\nEOF\n</code></pre> <p>Then make the donut fly with CJIT!</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe .\\donut.c\n</code></pre> <pre><code>./cjit donut.c\n</code></pre> <pre><code>./cjit donut.c\n</code></pre> <p>Warning</p> <p>With this example and other programs, just hit CTRL+C to quit.</p> <p>The state of affairs in CJIT is well demonstrated by this example: right now the terminal is much slower on windows (rightmost donut).</p> <p></p>"},{"location":"#game-of-life","title":"Game of Life","text":"<p>Anothre fascinating example is the \"Game of Life,\" a cellular automaton devised by the British mathematician John Horton Conway in 1970. This zero-player game simulates the evolution of a grid of cells, showcasing complex behaviors emerging from simple rules.</p> <p>Download the <code>life.c</code> example pasting a command in the terminal</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\" -OutFile \"life.c\"\n</code></pre> <pre><code>curl -sLo life.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\n</code></pre> <pre><code>curl -sLo life.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\n</code></pre> <p>Then execute the <code>life.c</code> source file passing it as argument to <code>cjit</code>, the same way it was done for the flying donut.</p> <p></p> <p>Pretty cool stuff for some \"boring\" terminal session eh? Have a look around the <code>life.c</code> file with your favorite text editor and feel free to change things and see what happens.</p>"},{"location":"#next-chapter-graphics-with-cjit","title":"\u23e9 Next chapter: graphics with CJIT","text":"<p>Now you are familiar with the way to execute CJIT! If you think that C is fun (and fast!) you are welcome to read the next chapter of this manual and discover one of many ways to run graphical applications.</p>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tomb(1) - the Crypto Undertaker","text":"<p>tomb, Jun 25, 2023</p> <pre><code>.B .IP \"tomb [options] command [arguments]\"</code></pre> <p></p>"},{"location":"#description","title":"Description","text":"<p>Tomb is an application to manage the creation and access of encrypted storage files: it can be operated from commandline and it can integrate with a user's graphical desktop.</p> <p>Tomb generates encrypted storage files to be opened and closed using their associated keys, which are also protected with a password chosen by the user. To create, open and close tombs a user will need super user rights to execute the tomb commandline utility.</p> <p>A tomb is like a locked folder that can be safely transported and hidden in a filesystem; it encourages users to keep their keys separate from tombs, for instance keeping a tomb file on your computer harddisk and its key file on a USB stick.</p> <p></p>"},{"location":"#commands","title":"Commands","text":"<ul> <li> <p>dig   Generates a file that can be used as a tomb and will occupy as much   space as its desired initial size, the unlocked .tomb file can   then be locked using a key. It takes a mandatory -s option   which is the size in megabytes (MiB). Tombs are digged using random   data gathered from a non-blocking source (/dev/urandom). For very   large tombs this may take up too much time and entropy, then it is   possible to use fallocate(1) being aware it does not pre-fill   with random data, decreasing the tomb's security.</p> </li> <li> <p>forge   Creates a new key and prompts the user for a password to protect   its usage using symmetric encryption. This operation uses random data from a   non-blocking source (/dev/urandom) and it may take long only in some cases; to   switch using a blocking source the --use-random flag can be used. The   -g option switches on the use of a GPG key instead of a password   (asymmetric encryption), then the -r option indicates the recipient key;   more recipient GPG ids can be indicated (comma separated). The default cipher   to protect the key is AES256, a custom one can be specified using the -o   option, for a list of supported ciphers use -v. For additional protection   against dictionary attacks on keys, the --kdf option can be used when   forging a key, making sure that the binaries in extras/kdf were compiled   and installed on the system.</p> </li> <li> <p>lock   Initializes and locks an empty tomb (made with dig) using a key   (made with forge), making it ready for usage. After this   operation, the tomb can only be opened in possession of the key and   knowing its password. As in any other command requiring a key, the   option -k should be used to specify a key file; in case of   encryption to GPG recipients the -g flag should be used followed   by -r and the recipient's secret GPG key id.  The -o   option can be used to specify the cipher specification: default is   \"aes-xts-plain64\", old versions of Tomb used \"aes-cbc-essiv:sha256\".   If you are looking for something exotic, also try   \"serpent-xts-plain64\". More options may be found in cryptsetup(8) and   Linux documentation. The --filesystem option can be used to   specify an alternative filesystem used to format the tomb,   in place of the default \"ext4\". This operation requires root   privileges to loopback mount, format the tomb (using LUKS and mkfs),   then set the key in its first LUKS slot.</p> <p>Supported filesystems for --filesystem: * ext3   using operating system defaults * ext4   using operating system defaults * btrfs   for tombs &gt;= 47MB using operating system defaults * btrfsmixedmode   for tombs &gt;=18MB btrfs mixed mode (see mkfs.btrfs(8)) * ext3maxinodes   ext3 with a maximum of inodes (for many small files) * ext4maxinodes   ext4 with a maximum of inodes (for many small files)</p> </li> <li> <p>open   Opens an existing tomb file (first argument) using a key   (-k) which can also be hidden inside a jpeg image (see   bury/exhume) or a long text file   (see_cloak_/uncloak). If a second argument is given it will   indicate the mountpoint where the tomb should be made   accessible, else the tomb is mounted in a directory inside /media (if   not available it uses /run/media/$USER).  The option -o can be   used to pass mount(8) options (default: rw,noatime,nodev). The   -g option is needed when using GPG encryption to recipients.</p> </li> <li> <p>list   List all the tombs found open, including information about the time   they were opened and the hooks that they mounted. If the first   argument is present, then shows only the tomb named that way or   returns an error if it's not found. If the option   --get-mountpoint is used then print a simple list of currently   open tomb mountpoint paths.</p> </li> <li> <p>ps   List all the processes found running inside the tombs that are open,   printing out their PIDs and owners. This is useful to have an overview   of programs that are keeping the tombs busy and would eventually be   killed by the slam command. The lsof(8) utility is used   internally to enumerate processes running in one or all tombs.</p> </li> <li> <p>index   Creates or updates the search indexes of all tombs currently open:   enables use of the search command using simple word patterns on   file names. Indexes are created using mlocate/plocate's updatedb(8) and   swish-e(1) if they are found on the system. Indexes allow one to search   very fast for filenames and contents inside a tomb, they are stored   inside it and are not accessible if the Tomb is closed. To avoid   indexing a specific tomb simply touch a .noindex file in it.</p> </li> <li> <p>search   Takes any string as argument and searches for them through all tombs   currently open and previously indexed using the index command.   The search matches filenames if mlocate/plocate is installed and then also   file contents if swish++ is present on the system, results are listed   on the console.</p> </li> <li> <p>close   Closes a currently open tomb.  If more tombs are open, the first   argument should be used to specify the name of the tomb to be closed,   or all to close all currently open tombs. This command fails if   the tomb is in use by running processes (to force close, see   slam below).</p> </li> <li> <p>slam   Closes a tomb like the command close does, but it doesn't fail   even if the tomb is in use by other application processes: it looks   for and closes each of them (in order: TERM, HUP, KILL). This command may   provoke unsaved data loss, but assists users to face surprise   situations. It requires lsof else it falls back to close.</p> </li> <li> <p>passwd   Changes the password protecting a key file specified using   -k. With keys encrypted for GPG recipients use -g followed   by -r to indicate the new recipient key, or a comma separated   list.. The user will need to know the key's current password, or   possess at least one of the current recipients GPG secret keys,   because the key contents will be decoded and reencoded using the new   passwords or keys. If the key file is broken (missing headers) this   function also attempts its recovery.</p> </li> <li> <p>setkey   Changes the key file that locks a tomb, substituting the old one with   a new one. Both the old and the new key files are needed for this   operation and their passwords or GPG recipient(s) secret keys must be   available. The new key must be specified using the -k option,   the first argument should be the old key and the second and last   argument the tomb file. Use the -g option to unlock the tomb   with a GPG key, the -r to indicate the recipient or a comma   separated list for more than one recipient.</p> </li> <li> <p>resize   Increase the size of a tomb file to the amount specified by the   -s option, which is the new size in megabytes (MiB). Full access   to the tomb using a key (-k) and its password is required. Tombs   can only grow and can never be made smaller. This command makes use of   the cryptsetup(8) resize feature and the resize2fs command: its much   more practical than creating a new tomb and moving everything into   it. There is no data-loss if a failure occurs during resize: the   command can be re-launched and the resize operation will complete.</p> </li> <li> <p>engrave   This command transforms a tomb key into an image that can be printed   on paper and physically stored as backup, i.e. hidden in a book. It   Renders a QRCode of the tomb key, still protected by its password: a   PNG image (extension .qr.png) will be created in the current   directory and can be later printed (fits an A4 or Letter format).  To   recover an engraved key one can use any QRCode reader on a smartphone:   save it into a file and then use that file as a key (-k).</p> </li> <li> <p>bury   Hides a tomb key (-k) inside a jpeg image (first argument)   using steganography: the image will change in a way that cannot   be noticed by human eye and hardly detected by data analysis. This   option is useful to backup tomb keys in unsuspected places; it depends   from the availability of steghide. Use the -g flag and   -r option followed by recipient id to use GPG asymmetric   encryption.</p> </li> <li> <p>exhume   This command recovers from jpeg images the keys that were previously   hidden into them using bury.  Exhume requires a key filename   (-k) and a jpeg image file (first argument) known to be   containing a key. If the right key password is given, the key will be   exhumed. If the password is not known, it is very hard to verify if a   key is buried in any image or not.</p> </li> <li> <p>cloak   Hides a tomb key (-k) inside a long plain-text file (first   argument) using steganography: the text will change in a way   that can hardly be noticed by human eye and hardly detected by data   analysis. This option is useful to backup tomb keys in unsuspected   places; it depends from the availability of cloakify and   consequently python2. This function does not support asymmetric   encryption using the -g flag.</p> </li> <li> <p>uncloak   This command recovers from long plain-text files the keys that were   previously hidden into them using cloak.  Cloak requires a key   filename (-k) and a plain-text file (first argument) known   to be containing a key. If the right key password is given, the key   will be exhumed. If the password is not known, it is quite hard to   verify if a key is buried in a text or not.</p> </li> </ul> <p></p>"},{"location":"#options","title":"Options","text":"<ul> <li> <p>-k &lt;keyfile&gt;   For all operations requiring a key, this option specifies the location   of the key file to use. Arguments can also be jpeg image files   where keys have been hidden using the bury or cloak   commands, or text files retrieved from engraved QR codes. If the   keyfile argument is \"-\" (dash), Tomb will read the key from   stdin (blocking).</p> </li> <li> <p>-n   Skip processing of exec-hooks and bind-hooks if found inside the tomb.   See the HOOKS section in this manual for more information.</p> </li> <li> <p>-p   When opening a tomb, preserves the ownership of all files and   directories contained in it. Normally the open command changes   the ownership of a tomb's contents to the UID and GID of the user who   has successfully opened it: it is a usability feature in case a tomb is   used by a single user across different systems. This flag deactivates   this behaviour.</p> </li> <li> <p>-o   Manually specify mount options to be used when opening a tomb instead   of the default rw,noatime,nodev, i.e. to mount a tomb read-only   (ro) to prevent any modification of its data. Can also be used to   change the symmetric encryption algorithm for keys during forge   operations (default AES256) or the LUKS encryption method during   lock operations (default aes-xts-plain64).</p> </li> <li> <p>-f   Force flag, currently used to override swap checks, might be   overriding more wimpy behaviours in future, but make sure you know   what you are doing if you force an operation.</p> </li> <li> <p>-s &lt;MBytes&gt;   When digging or resizing a tomb, this option must be used to specify   the size of the new file to be created. Units are megabytes (MiB).</p> </li> <li> <p>-g   Tell tomb to use a asymmetric GnuPG key encryption instead of a   symmetric passphrase to protect a tomb key. This option can be   followed by -r when the command needs to specify recipient(s).</p> </li> <li> <p>-r &lt;gpg_id&gt;[,&lt;gpg_id2&gt;]   Provide a new set of recipient(s) to encrypt a tomb key. gpg_ids   can be one or more GPG key ID, comma separated. All GPG keys must be   trusted keys in GPG.</p> </li> <li> <p>--kdf &lt;itertime&gt;   Activate the KDF feature against dictionary attacks when creating a key: forces   a delay of &lt;itertime&gt; times every time this key is used.  The actual time   to wait depends on the CPU speed (default) or the RAM size (argon2) of the   computer where the key is used.  Using 5 or 10 is a sane amount for modern   computers, the value is multiplied by 1 million.</p> </li> <li> <p>--kdftype argon2 | pbkdf2   Adopt the argon2 algorithm for KDF, stressing the RAM capacity rather   than the CPU speed of the computer decrypting the tomb. Requires the   argon2 binary by P-H-C to be installed, as packaged by most distros.   Default is pbkdf2.</p> </li> <li> <p>--kdfmem &lt;memory&gt;   In case of argon2 KDF algorithm, this value specifies the size of RAM   used: it consists of a number which is the elevated power of two in kilobytes.   Default is 18 which is 250 MiB (2^18 = 262,144 kilobytes).</p> </li> <li> <p>--sudo &lt;executable&gt;   Select a different tool than sudo for privilege escalation.   Alternatives supported so far are: pkexec, doas, sup, sud. For any   alternative to work the executable must be included in the current   PATH.</p> </li> <li> <p>--sphx-user &lt;username&gt;   Activate the SPHINX feature for password-authenticated key agreement.   This option indicates the &lt;username&gt; used to retrieve the   password from a sphinx oracle key reachable via TCP/IP.</p> </li> <li> <p>--sphx-host &lt;domain&gt;   Activate the SPHINX feature for password-authenticated key agreement.   This option indicates the &lt;domain&gt; used to retrieve the password   from a sphinx oracle daemon reachable via TCP/IP. This is not the   network address of the daemon, which is configured in /etc/sphinx</p> </li> <li> <p>-h   Display a help text and quit.</p> </li> <li> <p>-v   Display version and quit.</p> </li> <li> <p>-q   Run more quietly</p> </li> <li> <p>-D   Print more information while running, for debugging purposes</p> </li> </ul> <p></p>"},{"location":"#dev-mode","title":"Dev Mode","text":"<ul> <li> <p>--no-color   Suppress colors in console output (needed for string parsing by   wrappers).</p> </li> <li> <p>--unsafe   Enable using dev-mode arguments, i.e. to pass passwords from   commandline options. This is mostly used needed for execution by   wrappers and testing suite.</p> </li> <li> <p>--use-random   Use a blocking random source. Tomb uses by default /dev/urandom since   the non-blocking source of Linux kernel doesn't degrades the quality   of random.</p> </li> <li> <p>--tomb-pwd &lt;string&gt;   Use string as password when needed on tomb.</p> </li> <li> <p>--tomb-old-pwd &lt;string&gt;   Use string as old password when needed in tomb commands requiring   multiple keys, like passwd or setkey.</p> </li> <li> <p>-U   Switch to this user ID when dropping privileges.</p> </li> <li> <p>-G   Switch to this group ID when dropping privileges.</p> </li> <li> <p>-T   Switch to this TTY terminal when dropping privileges.</p> </li> </ul> <p></p>"},{"location":"#hooks","title":"Hooks","text":"<p>Hooks are special files that can be placed inside the tomb and trigger actions when it is opened and closed; there are two kinds of such files: bind-hooks and exec-hooks can be placed in the base root of the tomb.</p> <ul> <li>bind-hooks   This hook file consists of a simple text file named bind-hooks   containing a two column list of paths to files or directories inside   the tomb. The files and directories will be made directly   accessible by the tomb open command inside the current user's   home directory. Tomb uses internally the \"mount -o bind\" command to   bind locations inside the tomb to locations found in $HOME. In the   first column are indicated paths relative to the tomb and in the   second column are indicated paths relative to $HOME contents, for   example:</li> </ul> <pre><code>\n    mail          mail\n    .gnupg        .gnupg\n    .fmrc         .fetchmailrc\n    .mozilla      .mozilla\n\n</code></pre> <ul> <li>exec-hooks   This hook file gets executed as user by tomb with the first argument   determining the step of execution (open or close) and the second   being the full path to the mountpoint. The exec-hooks file should be   executable (ELF or shell script) and present inside the Tomb. Tomb   executes this hook as user and adds the name, loopback device and   dev-mapper device paths as additional arguments for the close   command.</li> </ul> <p></p>"},{"location":"#privilege-escalation","title":"Privilege Escalation","text":"<p>The tomb commandline tool needs to acquire super user rights to execute most of its operations: so it uses sudo(8) or other configured tools, while pinentry(1) is adopted to collect passwords from the user. Tomb executes as super user only when required.</p> <p>To be made available on multi user systems, the superuser execution of the tomb script can be authorized for users without jeopardizing the whole system's security: just add such a line to /etc/sudoers:</p> <pre><code>\n    username ALL=NOPASSWD: /usr/local/bin/tomb\n\n</code></pre> <p>To avoid that tomb execution is logged by syslog also add:</p> <pre><code>\n    Cmnd_Alias TOMB = /usr/local/bin/tomb\n    Defaults!TOMB !syslog\n\n</code></pre> <p></p>"},{"location":"#password-input","title":"Password Input","text":"<p>Password input is handled by the pinentry program: it can be text based or graphical and is usually configured with a symlink. When using Tomb in X11 it is better to use a graphical pinentry-gtk2 or pinentry-qt because it helps preventing keylogging by other X clients. When using it from a remote ssh connection it might be necessary to force use of pinentry-curses for instance by unsetting the DISPLAY environment var.</p> <p></p>"},{"location":"#swap","title":"Swap","text":"<p>On execution of certain commands Tomb will complain about swap memory on disk when present and abort if your system has swap activated. You can disable this behaviour using the --force. Before doing that, however, you may be interested in knowing the risks of doing so:</p> <ul> <li>During such operations a lack of available memory could cause the swap   to write your secret key on the disk.</li> <li>Even while using an opened tomb, another application could occupy too   much memory so that the swap needs to be used, this way it is possible   that some contents of files contained into the tomb are physically   written on your disk, not encrypted.</li> </ul> <p>If you don't need swap, execute _ swapoff -a_. If you really need it, you could make an encrypted swap partition. Tomb doesn't detect if your swap is encrypted, and will complain anyway.</p> <p></p>"},{"location":"#deniability","title":"Deniability","text":"<p>The possibility to have an encrypted volume which is invisible and cannot be detected is called \"deniability\". The cryptographic layer of the device mapper in Linux (dm-crypt) does not implement deniability. Tomb is just a wrapper on top of that and it doesn't add cryptographic deniability. However a certain way of using tomb can facilitate a weak sort of deniability outside of the scenario of seized devices and forensic analysis of files and blocks on disc.</p> <p>For instance to eliminate any trace of tomb usage from the shell history ZSh users can activate the \"HISTIGNORESPACE\" feature and prefix all invocations of tomb with a blank space, including two lines in \".zshrc\":</p> <pre><code>\n    export HISTIGNORESPACE=1\n    alias tomb=' tomb'\n\n</code></pre> <p></p>"},{"location":"#password-input_1","title":"Password Input","text":"<p>Tomb uses the external program \"pinentry\" to let users type the key password into a terminal or a graphical window. This program works in conjunction with \"gpg-agent\", a daemon running in background to facilitate secret key management with gpg. It is recommended one runs \"gpg-agent\" launching it from the X session initialization (\"~/.xsession\" or \"~/.xinitrc\" files) with this command:</p> <pre><code>\n    eval $(gpg-agent --daemon --write-env-file \"${HOME}/.gpg-agent-info\")\n\n</code></pre> <p>In the future it may become mandatory to run gpg-agent when using tomb.</p> <p></p>"},{"location":"#share-a-tomb","title":"Share a Tomb","text":"<p>A tomb key can be encrypted with more than one recipient. Therefore, a tomb can be shared between different users. The recipients are given using the -r (or/and -R) option and if multiple each GPG key ID must be separated by a comma (,). Sharing a tomb is a very sensitive action and the user needs to trust that all the GPG public keys used are kept safe. If one of them its stolen or lost, it will be always possible to use it to access the tomb key unless all its copies are destroyed. The -r option can be used in the tomb commands: open, forge setkey, passwd, bury, exhume and resize.</p> <p></p>"},{"location":"#sphinx-pake","title":"Sphinx (Pake)","text":"<p>Using the package libsphinx  and its python client/daemon implementation pwdsphinx  is possible to store and retrieve safely the password that locks the tomb. Using this feature will make it impossible to retrieve the password without the oracle sphinx server running and reachable. Each key entry needs a username and a domain specified on creation and a password that locks it.</p> <p>SPHINX makes it impossible to maliciously retrieve the password locking the tomb key without an attacker accessing both the server, the sphinx password and the tomb key file.</p> <p></p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Create a 128MB large \"secret\" tomb and its keys, then open it:</li> </ul> <pre><code>\n    tomb dig -s 128 secret.tomb\n\n    tomb forge secret.tomb.key\n\n    tomb lock secret.tomb -k secret.tomb.key\n\n    tomb open secret.tomb -k secret.tomb.key\n\n</code></pre> <ul> <li>Open a Tomb using the key from a remote SSH shell, without saving any   local copy of it:</li> </ul> <pre><code>\n    ssh user@my.shell.net 'cat .secrets/tomb.key' | tomb open secret.tomb -k -\n\n</code></pre> <ul> <li>Open a Tomb on a remote server passing the unencrypted local key on stdin via SSH,   without saving any remote copy of it:</li> </ul> <pre><code>\n    gpg -d .secrets/tomb.key | ssh server tomb open secret.tomb -k cleartext --unsafe\n\n</code></pre> <ul> <li>Create a bind hook that places your GnuPG folder inside the tomb, but   makes it reachable from the standard $HOME/.gnupg location every time   the tomb will be opened:</li> </ul> <pre><code>\n    tomb open GPG.tomb -k GPG.tomb.key\n    echo \".gnupg .gnupg\" &amp;gt; /media/GPG.tomb/bind-hooks\n    mv ~/.gnupg /media/GPG.tomb/.gnupg &amp;&amp; mkdir ~/.gnupg\n    tomb close GPG &amp;&amp; tomb open GPG.tomb -k GPG.tomb.key\n\n</code></pre> <ul> <li>Script a tomb to launch the Firefox browser every time is opened,   keeping all its profile data inside it:</li> </ul> <pre><code>\n    tomb open FOX.tomb -k FOX.tomb.key\n    cat &amp;lt;&amp;lt;EOF &amp;gt; /media/FOX.tomb/exec-hooks\n  #!/bin/sh\n  if [ \"$1\" = \"open\" ]; then\n    firefox -no-remote -profile \"$2\"/firefox-pro &amp;\n  fi\n  EOF\n    chmod +x /media/FOX.tomb/exec-hooks\n    mkdir /media/FOX.tomb/firefox-pro\n\n</code></pre> <ul> <li>Script a tomb to archive Pictures using Shotwell, launching it on open:</li> </ul> <pre><code>\n    tomb open Pictures.tomb -k Pictures.tomb.key\n    cat &amp;lt;&amp;lt;EOF &amp;gt; /media/Pictures.tomb/bind-hooks\n  Pictures Pictures\n  EOF\n    cat &amp;lt;&amp;lt;EOF &amp;gt; /media/Pictures.tomb/exec-hooks\n  #!/bin/sh\n  if [ \"$1\" = \"open\" ]; then\n    which shotwell &amp;gt; /dev/null\n    if [ \"$?\" = \"0\" ]; then\n        shotwell -d \"$2\"/Pictures/.shotwell &amp;\n    fi\n  fi\n  EOF\n    chmod +x /media/Pictures.tomb/exec-hooks\n\n</code></pre>"},{"location":"#bugs","title":"Bugs","text":"<p>Please report bugs on the Github issue tracker at </p> <p>One can also try to get in touch with developers via the #dyne chat channel on https://irc.dyne.org.</p> <p></p>"},{"location":"#copying","title":"Copying","text":"<p>This manual is Copyright (c) 2011-2021 by Denis Roio &lt;jaromil@dyne.org&gt;</p> <p>This manual includes contributions by Boyska and Hellekin O. Wolf.</p> <p>Permission is  granted to copy,  distribute and/or modify  this manual under the terms of the  GNU Free Documentation License, Version 1.1 or any  later   version  published  by  the   Free  Software  Foundation. Permission is granted  to make and distribute verbatim  copies of this manual page  provided the above  copyright notice and  this permission notice are preserved on all copies.</p> <p></p>"},{"location":"#availability","title":"Availability","text":"<p>The most recent version of Tomb sourcecode and up to date documentation is available for download from its website on https://tomb.dyne.org.</p> <p></p>"},{"location":"#see-also","title":"See Also","text":"<ul> <li> <p>cryptsetup(8)  </p> </li> <li> <p>pinentry(1)  </p> </li> <li> <p>gpg-agent(1)  </p> </li> </ul> <p>GnuPG website: https://www.gnupg.org</p> <p>DM-Crypt website: https://gitlab.com/cryptsetup/cryptsetup/wikis/DMCrypt</p> <p>LUKS website: https://gitlab.com/cryptsetup/cryptsetup/wikis/home</p>"}]}
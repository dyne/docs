{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CJIT Manual","text":"<p>CJIT is a versatile C interpreter based on TinyCC, designed to compile C code in-memory and execute it live. This manual serves as a guide to the full potential of CJIT, empowering you to efficiently develop and test C programs in real-time.</p> <p>CJIT is distributed as a small, all-in-one executable, ensuring a lightweight and portable solution for your coding needs. One of its standout features is the ability to call functions from any installed library, making it a robust tool for rapid prototyping and dynamic code execution on Linux, Windows, and macOS. \ud83d\udda5\ufe0f</p> <p>The following sections will guide you through practical usage examples, helping you to swiftly integrate CJIT into your workflow. \ud83d\udcda\ud83d\udd27</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>This classic example will make you create a <code>hello.c</code> file and execute it with CJIT to print the string \"Hello World!\" in the terminal.</p> <p>Please chose the right example code using tabs: MS/Windows, Apple/OSX or GNU/Linux</p> <p>Info</p> <p>All Windows based examples are made for the PowerShell terminal, if you are on WSL then chose GNU/Linux</p> <p>Download CJIT pasting a command in the terminal</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Uri \"https://github.com/dyne/cjit/releases/latest/download/cjit.exe\" -OutFile \"cjit.exe\"\n</code></pre> <pre><code>curl -sLo cjit https://github.com/dyne/cjit/releases/latest/download/cjit-$(uname)-$(uname -m)\n</code></pre> <pre><code>curl -sLo cjit https://github.com/dyne/cjit/releases/latest/download/cjit-$(uname)-$(uname -m)\n</code></pre> <p>Then create hello.c by pasting these lines in the terminal:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>@\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\n\"@| Out-File -FilePath \"hello.c\"\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; hello.c\n#!/usr/bin/env cjit\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\nEOF\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; hello.c\n#!/usr/bin/env cjit\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(int argc, char **argv) {\n  fprintf(stderr,\"Hello, World!\\n\");\n  exit(0);\n}\nEOF\n</code></pre> <p>Finally execute hello.c using CJIT with:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe .\\hello.c\n</code></pre> <pre><code>./cjit hello.c\n</code></pre> <pre><code>./cjit hello.c\n</code></pre> <p>As a result you will see CJIT starting and printing \"Hello World!\"</p> <pre><code>CJIT v0.8.7 by Dyne.org\ninc: C:\\Users\\utente\\AppData\\Local\\Temp\\CJIT-v0.8.7\nlib paths: C:\\Users\\utente\\AppData\\Local\\Temp\\CJIT-v0.8.7\nSource code:\n+ .\\hello.c\nExecution start\n---\nHello, World!\n</code></pre> <p>You can now play with <code>hello.c</code>, change what you want and run it again!</p>"},{"location":"#flying-donuts","title":"Flying Donuts","text":"<p>This example will print an animated donut on the terminal!</p> <p>Create the <code>donut.c</code> file using the artful code below:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>@\"\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\n\"@| Out-File -FilePath \"donut.c\"\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; donut.c\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\nEOF\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; donut.c\n             i,j,k,x,y,o,N;\n         main(){float z[1760],a\n      #define R(t,x,y) f=x;x-=t*y\\\n   ;y+=t*f;f=(3-x*x-y*y)/2;x*=f;y*=f;\n   =0,e=1,c=1,d=0,f,g,h,G,H,A,t,D;char\n b[1760];for(;;){memset(b,32,1760);g=0,\nh=1;memset(z,0,7040);for(j=0;j&lt;90;j++){\nG=0,H=1;for(i=0;i&lt;314;i++){A=h+2,D=1/(G*\nA*a+g*e+5);t=G*A        *e-g*a;x=40+30*D\n*(H*A*d-t*c);y=          12+15*D*(H*A*c+\nt*d);o=x+80*y;N          =8*((g*a-G*h*e)\n*d-G*h*a-g*e-H*h        *c);if(22&gt;y&amp;&amp;y&gt;\n 0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;b[o]=(N&gt;0\n  ?N:0)[\".,-~:;=!*#$@\"];}R(.02,H,G);}R(\n  .07,h,g);}for(k=0;1761&gt;k;k++)putchar\n   (k%80?b[k]:10);R(.04,e,a);R(.02,d,\n     c);usleep(15000);printf('\\n'+(\n        \" donut.c! \\x1b[23A\"));}}\n          /*no math lib needed\n             .@a1k0n 2021.*/\nEOF\n</code></pre> <p>Then make the donut fly with CJIT!</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe .\\donut.c\n</code></pre> <pre><code>./cjit donut.c\n</code></pre> <pre><code>./cjit donut.c\n</code></pre> <p>Warning</p> <p>With this example and other programs, just hit CTRL+C to quit.</p> <p>The state of affairs in CJIT is well demonstrated by this example: right now the terminal is much slower on windows (rightmost donut).</p> <p></p>"},{"location":"#game-of-life","title":"Game of Life","text":"<p>Anothre fascinating example is the \"Game of Life,\" a cellular automaton devised by the British mathematician John Horton Conway in 1970. This zero-player game simulates the evolution of a grid of cells, showcasing complex behaviors emerging from simple rules.</p> <p>Download the <code>life.c</code> example pasting a command in the terminal</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\" -OutFile \"life.c\"\n</code></pre> <pre><code>curl -sLo life.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\n</code></pre> <pre><code>curl -sLo life.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/life.c\n</code></pre> <p>Then execute the <code>life.c</code> source file passing it as argument to <code>cjit</code>, the same way it was done for the flying donut.</p> <p></p> <p>Pretty cool stuff for some \"boring\" terminal session eh? Have a look around the <code>life.c</code> file with your favorite text editor and feel free to change things and see what happens.</p>"},{"location":"#next-chapter-graphics-with-cjit","title":"\u23e9 Next chapter: graphics with CJIT","text":"<p>Now you are familiar with the way to execute CJIT! If you think that C is fun (and fast!) you are welcome to read the next chapter of this manual and discover one of many ways to run graphical applications.</p>"},{"location":"graphics/","title":"CJIT for graphical applications","text":"<p>Be welcome to the exciting world of graphical C applications using SDL (Simple DirectMedia Layer). SDL, originally developed by Sam Lantinga in 1998, is a powerful, cross-platform library designed to provide low-level access to audio, keyboard, mouse, and graphics hardware via OpenGL and Direct3D. It is an ideal choice of free and open source library to create graphical applications that run seamlessly across different operating systems.</p> <p>Whether you're developing games, simulations, or interactive tools, the combination of CJIT's simplicity in C code execution and SDL's cross-platform capabilities offers a solution for your graphical application needs.</p> <p>As in the previous chapter, the following sections will guide you through practical usage examples, demonstrating how to create graphical applications. \ud83c\udf1f\ud83d\udcda</p>"},{"location":"graphics/#the-beauty-of-random","title":"The Beauty of Random","text":"<p>First download SDL for your platform. In Windows we download and extract a zip archive, on other system we install the latest SDL from package managers.</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Outfile SDL2-devel.zip -Uri https://github.com/libsdl-org/SDL/releases/download/release-2.30.9/SDL2-devel-2.30.9-mingw.zip\nunzip SDL2-devel.zip\n</code></pre> <pre><code>brew install sdl2\n</code></pre> <pre><code>sudo apt-get install libsdl2-dev\n</code></pre> <p>Then download the sdl2_noise.c example:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/sdl2_noise.c\" -OutFile \"sdl2_noise.c\"\n</code></pre> <pre><code>curl -sLo sdl2_noise.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/sdl2_noise.c\n</code></pre> <pre><code>curl -sLo sdl2_noise.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/sdl2_noise.c\n</code></pre> <p>Then as usual execute it passing the source file as argument to CJIT. Since we are calling functions shared by a library, we'll add some extra parameters:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe .\\sdl2_noise.c -I.\\SDL2-2.30.9\\x86_64-w64-mingw32\\include\\ -L.\\SDL2-2.30.9\\x86_64-w64-mingw32\\bin\\\n</code></pre> <pre><code>./cjit ./sdl2_noise.c -lSDL2\n</code></pre> <pre><code>./cjit ./sdl2_noise.c -lSDL2\n</code></pre> <p></p> <p>Info</p> <p>This preview looks blurred because video compression cannot deal well with randomness.</p> <p>Have a look inside sdl2_noise.c, and at the beginning of the file you'll see some particular lines of code worth explaining:</p>"},{"location":"graphics/#the-hashbang","title":"The \"hashbang\"","text":"<pre><code>#!/usr/bin/env cjit\n</code></pre> <p>This line indicates that the source file is a script that can be executed using the <code>cjit</code> interpreter when the executable bit is enabled and if the CJIT interpreter is found in PATH.</p> <p>Warning</p> <p>The hashbang works only on Apple/OSX and GNU/Linux, where any file can be made executable with <code>chmod +x</code></p>"},{"location":"graphics/#the-pragma-lib","title":"The pragma lib","text":"<pre><code>#pragma comment(lib, \"SDL2\")\n</code></pre> <p>This line tells CJIT to link the <code>SDL2</code> shared library (the one installed on the system or found inside an <code>-L</code> path) and allows the source code to call functions provided by it. It is the equivaled of <code>-lSDL2</code> on the commandline, with the only difference that it can be specified inside the source code.</p> <p>Info</p> <p>For Windows this means to look for <code>SDL2.dll</code> in a path indicated by <code>-L</code>. Another way to link libraries in Windows is to copy the <code>dll</code> files inside the same folder of the source code and add their filename to the list of arguments.</p>"},{"location":"graphics/#the-sdl2-fix","title":"The SDL2 fix","text":"<pre><code>#define SDL_DISABLE_IMMINTRIN_H 1\n#define SDL_MAIN_HANDLED 1\n</code></pre> <p>These lines tell SDL to disable some functionalities that break CJIT's execution. Without them defined before the <code>#include &lt;SDL2/SDL.h&gt;</code> line Windows applications will crash.</p>"},{"location":"graphics/#three-dimensions","title":"Three Dimensions","text":"<p>To draw accelerated graphics and 3D objects we'll use OpenGL, short for Open Graphics Library: this is a cross-language, cross-platform API for rendering 2D and 3D vector graphics. Originally developed by Silicon Graphics Inc. (SGI) in 1992, OpenGL has become a widely adopted standard in the graphics industry.</p> <p>Combining OpenGL with CJIT enables you to take full advantage of GPU accelerated graphics rendering while leveraging the dynamic capabilities of in-memory C code compilation, to swiftly prototype and test graphics-intensive applications.</p> <p>Here is how to do it. First make sure you have OpenGL on your system: Windows users don't need to worry, it is there already.</p> MS/WindowsApple/OSXGNU/Linux <p>Nothing to do.</p> <p>Not sure (help testing this please!)</p> <pre><code>sudo apt-get install libopengl-dev\n</code></pre> <p>Then download the opengl.c example we ship in CJIT, adapted from this awesome opengl+SDL2 tutorial by Andrew Dailey.</p> MS/WindowsApple/OSXGNU/Linux <pre><code>Invoke-WebRequest -OutFile \"opengl.c\" -Uri \"https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/opengl.c\"\n</code></pre> <pre><code>curl -sLo opengl.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/opengl.c\n</code></pre> <pre><code>curl -sLo opengl.c https://raw.githubusercontent.com/dyne/cjit/refs/heads/main/examples/opengl.c\n</code></pre> <p>And execute it as usual, giving the <code>opengl.c</code> file name as argument to CJIT. In case of windows you'll have to include also the path to the SDL2 library which was used in the previous example:</p> MS/WindowsApple/OSXGNU/Linux <pre><code>.\\cjit.exe ./opengl.c -DWINDOWS -I .\\SDL2-2.30.9\\x86_64-w64-mingw32\\include\\ -L.\\SDL2-2.30.9\\x86_64-w64-mingw32\\bin\n</code></pre> <pre><code>./cjit ./opengl.c\n</code></pre> <pre><code>./cjit ./opengl.c\n</code></pre> <p></p> <p>Let's have a quick look at what is happening here: please note the <code>-DWINDOWS</code> execution flag we use for Windows. Then look at the <code>opengl.c</code> code:</p> <pre><code>// Taken from https://github.com/theandrew168/sdl2-opengl-demo\n//\n// Copyright (c) 2020 Andrew Dailey\n//\n// Slightly modified to be one-file and work in CJIT by Jaromil\n//\n// MIT License\n//\n// Tutorial explanation:\n// https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/\n\n#pragma comment(lib, \"SDL2\")\n\n#ifdef WINDOWS\n#pragma comment(lib, \"opengl32\")\n#elif LINUX\n#pragma comment(lib, \"OpenGL\")\n#else\n#pragma comment(lib, \"OpenGL\")\n#endif\n</code></pre> <p>Below the well deserved credits for this example there are different ways to link the OpenGL library, because the library file is named differently on different platforms. We solve the problem by using a <code>#define</code> macro with symbol <code>WINDOWS</code> to branch over a different <code>#pragma</code> directive chosing the case-sensitive name of the library.</p> <p>To understand the rest of the code make sure to read the multi-platform-modern-opengl-demo-with-sdl2 tutorial.</p>"}]}
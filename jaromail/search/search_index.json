{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jaromail(1) -- self-sovereign e-mail management","text":"<p>Jaro Mail is an integrated suite of interoperable tools to manage e-mail communication in a private and efficient way, without relying too much on on-line services, in fact encouraging users to store their email locally.</p> <p>Rather than reinventing the wheel, this suite reuses existing free and open source tools and protocols and is mainly targeted for GNU/Linux/BSD desktop usage.</p> <p>This manual illustrates the usage of Jaro Mail. The newest version of this manual is made available on http://files.dyne.org/jaromail/jaromail-manual.pdf</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Minimalistic and efficient interface with message threading</li> <li>Targets intensive usage of e-mails and mailinglists</li> <li>Stores e-mails locally in a reliable format (maildir)</li> <li>Integrates whitelisting and blacklisting, local and remote</li> <li>Can do search and backup by advanced expressions</li> <li>Automatically generates filter rules (sieve)</li> <li>Imports and exports VCard contacts to addressbook</li> <li>Computes and shows statistics on mail traffic</li> <li>Facilitates sending anonymous emails (Mixmaster)</li> <li>Encrypted password storage using OS native keyrings</li> <li>Advanced maildir tools (merge, backup, address extraction)</li> <li>Defers connections for off-line operations</li> <li>Checks SSL/TLS certificates when fetching and sending mails</li> <li>Supports strong encryption messaging (GnuPG)</li> <li>Multi platform: GNU/Linux/BSD, Apple/OSX</li> <li>Old school, used by its author for the past 10 years</li> </ul>"},{"location":"#vision","title":"Vision","text":"<p>The internet offers plenty of free services, on the wave of the Web2.0 fuzz and the community boom, while all private informations are hosted on servers owned by global corporations and monopolies.</p> <p>It is important to keep in mind that no-one else better than you can ensure the privacy of your personal data. Server hosted services and web integrated technologies gather all data into huge information pools that are made available to established economical and cultural regimes.</p> <p>The vision behind this software is that of sharing a simple and consistent way to operate e-mail communication with tools that are available on most platforms and can be as well used remotely over a secure shell connection.</p> <p>Jaro Mail aims to facilitate the task of downloading and storing e-mail archives off-line in a way that they can be still accessible in more than 10 years time and independently of any software. Nowadays many users have the habit of keeping all their e-mails on servers, accessing them through an often clumsy web interface, while downloading them can free space and improve their privacy.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>JaroMail is a usable terminal interface that easily sets up and integrates the following components to manage large e-mail folders locally:</p> Acronym Function Software MUA Mail User Agent Mutt MTA Mail Transport Agent Fetchmail LDA Local Delivery Agent Mblaze MDA Remote Delivery Agent Sieve SMTP Mail delivery agent MSmtp ANON Anonymous delivery MixMaster SEARCH Mail Search engine Notmuch ABOOK Contacts Addressbook ABook GPG Cryptographic Agent GnuPG STORE Cryptographic Storage Tomb"},{"location":"#setup","title":"Setup","text":""},{"location":"#build","title":"Build","text":"<p>Some dependencies are needed in order to build this software. The Makefile for GNU/Linux configures the build environment automatically on Debian and Fedora systems, using their packaging to install all needed packages.</p> <p>The dependencies to be installed on the system for JaroMail are:</p> <pre><code>gcc bison flex make autoconf automake sqlite3 libglib2.0-dev libgnome-keyring-dev\n</code></pre>"},{"location":"#install","title":"Install","text":"<p>To install the following programs need to be installed:</p> <pre><code>fetchmail msmtp neomutt direnv mblaze pinentry abook wipe notmuch alot\n</code></pre> <p>Then <code>make install</code> will put all jaromail files in <code>/usr/local/share/jaromail</code>.</p>"},{"location":"#appleosx","title":"Apple/OSX","text":"<p>Apple/OSX users that have no experience in building software can obtain a pre-built universal binary from our download zone on http://files.dyne.org/jaromail/binary</p> <p>One can simply drag JaroMail into Applications. When started JaroMail opens a Terminal window preconfigured with its environment, to activate it for any terminal add this to `\\~/.profile`:</p> <p><code>export PATH=/Applications/JaroMail.app/Contents/Resources/jaro/bin:$PATH</code></p>"},{"location":"#use","title":"Use","text":"<p>Make a directory where all the emails and settings needs to be, change to the directory and init the environment:</p> <p><code>mkdir $HOME/gmail-alternative</code></p> <p><code>cd $HOME/gmail-alternative</code></p> <p><code>jaro init</code></p> <p>Every installation of Jaro Mail is fully reentrant, meaning the directory where it gets initialised contains all maildirs, configurations, filters, whitelist, addressbooks and other necessary files.</p> <p>A single user can have multiple Jaro Mail folders on the same system to permit the complete separation of E-Mail identities.</p> <p>If called from outside the installation directory, the jaro command will use the environmental variable \\$JAROMAILDIR to find out the active installation being in use. If one is using a different installation path then should first change that, i.e:</p> <p><code>export JAROMAILDIR=$HOME/OtherIdentities/Luther/Mail</code></p>"},{"location":"#configuration","title":"Configuration","text":"<p>The place where Jaro Mail is initialized, its folder contains all configuration files.</p> <p>From now own, we will call this place the MAILDIR.</p> <p>Configurations are in readable plain text files that can be edited using any editor. Inside them there are comments to explain the settings: all comment lines start by \\'#\\' and will be ignored by JaroMail.</p> <p>The most important files to start configuring are:</p> <ul> <li><code>Accounts/default.txt</code> : main account configuration (there can be more than one file in the <code>Accounts/</code> folder)</li> <li><code>Aliases.txt</code> : more email addresses one may receive on the configured accounts</li> <li><code>Filters.txt</code> : Full set of mailinglist sorting rules</li> <li><code>Applications.txt</code> : mime type associations to programs used to open attachments</li> <li><code>Mutt.txt</code> : mutt specific custom configurations</li> </ul>"},{"location":"#accounts","title":"Accounts","text":"<p>Inside the Mail directory is found the folder Accounts with brief instructions and default templates to fill with Imap and Smtp account configurations to fetch mail. A default template will be found in fresh installations: Accounts/default.txt. The configuration can be edited with one\\'s favourite text editor, the format of the file is pretty self-explanatory.</p> <p>It is possible to have more than one account (simply as a new file in the Accounts/ directory) and refer to it using the <code>-a</code> commandline option. For instance when we configure <code>Accounts/gamer.txt</code> as an alternative mailbox then we can connect it using <code>jaro peek -a gamer</code></p> <p>Config files in <code>Accounts</code> can also contain <code>my_hdr</code> that will configure custom header lines (for instance GPG-ID or X-Organisation) that will be added to the mails sent. For more information about the vast amount of configurations supported please refer to the Mutt documentation[^1].</p>"},{"location":"#organization","title":"Organization","text":"<p>One of the main goals for Jaro Mail is to organize the e-mail workflow so that one\\'s attention is dedicated to important communications, rather than being constantly distracted by various degrees of spam and the need to weed it out of the mailbox. This ambitious task is pursued by realizing an integrated approach consisting of flexible whitelisting and the distinction between mails from known people and the rest.</p>"},{"location":"#folders","title":"Folders","text":"<p>First lets start with a categorization of the standard maildirs and a brief description for each. This information is very important to understand how Jaro Mail works: these maildirs are standard in Jaro Mail, here they are listed in order of priority</p> <p>Folder             What goes in there</p> <p>known          Mails whose sender is known (Whitelist)   priv           Unknown sender, we are among explicit recipients   unsorted       Unknown sender, we are not among recipients   zz.blacklist   Mails whose sender is not desired (Blacklist)   zz.spam        Mails that are tagged as spam (server-side)   zz.bounces     Mail bounces like mailman and similar</p> <p>The advantage using such a folder organization is that every time we open up the mail reader we will be presented with something we are likely to be most interested in (known people replying our mails) and progressively, as we will have the time to scroll through, mails from \\\"new people\\\" or mass mailings of sort.</p> <p>This setup is handy especially considering it produces sieve filters that can be uploaded to mail servers and processed server-side. Imagine having your email on a fixed computer, but occasionally checking it from a mobile phone: server-side filtering will save you time by presenting a clean INBOX of whitelisted contacts for the mobile phone use.</p> <p>Please note this organization does not includes spam, which is supposedly weeded out on the server via spamlists: White/Blacklisting has more to do with our own selection of content sources than with the generic protection from random pieces of information.</p> <p>At last, anything that is matched by filters configured in Filters.txt will be saved into the named maildir, whose name can be freely choosen.</p>"},{"location":"#whitelist","title":"Whitelist","text":"<p>The way whitelisting works if quite crucial to this setup and, at the same time, is fairly simple since it does not include any automatic detection, learning filters, Markov chains or Bayesian A/I. We believe the user should be in full control of prioritizing communication channels and at the same time constantly able to tweak the setup in an easy way.</p> <p>To whitelist an address is sufficient to send it an e-mail: at the moment the message is sent Jaro Mail will remember the destination address and prioritize all messages coming back from it. This we call implicit whitelisting.</p> <p>To explicitly whitelist an address from inside the mail reader index press [ a ] while selecting an email, this will add in the whitelist the sender address (From: header). If you want to add all addresses reached by the mail (From: To: and Cc: fields) use the same letter capitalized pressing shift [ A ].</p> <p>All addresses selected this way will have the privilege of ending up in your known/ folder, plus their name and e-mail will be completed automatically when composing a new email, pressing the Tab key while indicating them among the recipients.</p>"},{"location":"#blacklist","title":"Blacklist","text":"<p>To blacklist an address instead one can use the [ z ] key while an e-mail is selected on the index: the sender indicated in the From: field will be downgraded to the very bottom of your priorities, closes to spam than the rest, the most infamous zz.blacklist/ folder.</p>"},{"location":"#organization-in-brief","title":"Organization In Brief","text":"<p>Below a recapitulation of keys related to the white and blacklisting functionality, to be used in the e-mail index or when an e-mail is open inside the mail user agent:</p> <p>List    Key             Function                  Fields</p> <p>White   a           Add the sender address    From:   White   A (shift)   Add all addresses         From: To: Cc:   Black   z           Blacklist the sender      From:   Black   Z (shift)   Blacklist all addresses   From: To: Cc:</p>"},{"location":"#workflow","title":"Workflow","text":"<p>This section goes through a scenario of simple usage for Jaro Mail</p>"},{"location":"#fetch-and-read-your-mail-at-home","title":"Fetch and read your mail at home","text":"<p>As you acces your computer where Jaro Mail has been configured, you can open a Terminal and type:</p> <pre><code>jaro fetch\n</code></pre> <p>This will download all new mails.</p> <p>If you have configured fetchall among the imap account options, then will delete them from the server, freeing online space.</p> <p>If you have configured the keep option, which is the default, Jaro Mail will only download the email that you have not yet read and in any case it won\\'t delete anything from the server. Remove the keep option to delete on the server all emails that are downloaded.</p> <pre><code>jaro\n</code></pre> <p>This will launch mutt on the first folder containing unread emails, starting from the known folder, then priv, then all the destinations specified by Filters.txt exactly in the ascending order they are listed in that configuration file..</p> <p>From there on, pressing = or c you can change to other folders and your unsorted mails.</p>"},{"location":"#write-a-new-mail","title":"Write a new mail","text":"<p>If you like to write a mail to someone, hit m and write the recipient address, you will be then asked about any additional Cc: recipients.</p> <p>If you don\\'t remember the emails of the recipients, you can just type their name or parts of the email you remember, then press the [ Tab ] key for completion. A list of addresses may popup with matches found in your whitelist addressbook to help remind who are you looking for.</p> <p>The email is composed using a special Vim configuration that facilitates justifying text to 72 columns using [ ctrl-j ]. After composing the email you will be able to review it and change:</p> <ul> <li>the From: field using [ ESC f ]</li> <li>the recipient in the To: field using [ t ]</li> <li>the recipients in the Cc: field using [ c ]</li> <li>the subject string using [ s ]</li> </ul> <p>You\\'ll also be able to add more attachments by pressing a and use the arrow keys to move over the existing ones and delete them using [ D ] (please note that is a uppercase D, because lowercase d will just add a description for the attachment).</p> <p>At last, when ready, pressing y will queue the email into the outbox, ready for sending.</p> <p>One can review at any time the sending queue, which is just another maildir named outbox</p> <pre><code>jaro outbox\n</code></pre> <p>Mails can be deleted from this view using [ d ] or edited using [ e ] which will allow tweaking of both the header and body of the email.</p> <p>Once sure the outbox contains all what needs to be sent, make sure the computer is connected to the Internet and issue the send command:</p> <pre><code>jaro send\n</code></pre> <p>Jaro Mail will send all emails in outbox, one by one, listing their recipients and size while doing so. If successful, mails will be removed from the outbox and put into the sent folder, which can be accessed from inside mutt or with the command jaro open sent.</p>"},{"location":"#write-a-new-email-from-the-commandline","title":"Write a new email from the commandline","text":"<p>Jaro Mail supports a lot of commandline operations based on stdin/stdout pipes, which makes it pretty easy to use in scripts that send emails and attachments.</p> <p>If you have written a plain-text email using your favorite editor, you can send it quickly using the commandline: save the email into a txt file and then pipe it into jaro compose followed by a list of recipients and, optionally a list of filenames to attach. For example:</p> <pre><code>cat Greetings.txt | jaro compose friends@dyne.org picture01.jpg jingle02.mp3 ~/myicons/*\n</code></pre> <p>The command above may send an email with various separate attachments (using MIME encapsulation): a picture, an hopefully small audio file and a list of icons which are all the files contained into the myicons/ directory. In this case the recipient will be friends@dyne.org, but may be any other email address found on the commandline in any position.</p> <p>Once executed you will find this email in jaro outbox, ready to be reviewed and sent with jaro send.</p>"},{"location":"#reply-messages","title":"Reply messages","text":"<p>While browsing through the index of emails in various folders, one can reply any of them just by pressing the [ r ] key, which will ask if the original message should be quoted and then open your favorite editor to compose your text.</p> <p>If the email you are replying has been sent to multiple recipients (for instance using multiple addresses in the Cc: or From: fields) they will all be included, but you will have the possibility to exclude them by hand, editing the Cc: field. To remove them all at once use [ ctrl-k ] just like deliting a line on the terminal.</p> <p>It is also possible to forward a message to someone else than the sender, for instance to submit it to his or her attention, or that of a mailinglist. To do that, you can use the [ f ] key which will present you with the full message and the possibility to write something on top of it, to describe its contents to its new recipients. Forwards include all attachments and are sent as attachments themselves, but this behavious can be changed as a confirmation to \\\"send forward as attach\\\" is asked.</p>"},{"location":"#peek-without-downloading-anything","title":"Peek without downloading anything","text":"<p>If you are around and like to see your new mails without downloading them, then you can use the peek function:</p> <pre><code>jaro peek\n</code></pre> <p>This will open the default configured IMAP account and folder over SSL protocol (securing the data transfer) and allow you to browse, read and reply your emails without downloading them.</p> <p>Using peek you can reply and even delete emails, but be careful since what you delete here will be removed from the server and won\\'t be there when you download it from home.</p> <p>This functionality can be also very useful if you are from a slow connection and need to delete some email that is clogging it and that you are not able to download because of its size.</p> <p>The peek command will automatically open the INBOX, but also other remote imap folders can be specified, like for instance priv or unsorted if whitelisting is also setup server-side (the sieve filters generated by Jaro Mail need to be uploaded on the server). To have a list of imap folders on the server a command is also available:</p> <pre><code>jaro imap listfolders\n</code></pre> <p>Will list on the terminal all folders found on the imap account, one per line.</p>"},{"location":"#save-important-emails-for-later","title":"Save important emails for later","text":"<p>Sometimes one can be on the rush while reading emails (local or via imap) and flagging them as important can be useful to keep focus on priorities. In some cases it is very useful to save such important messages locally for later reference, for instance in a folder keeping messages that need to be remembered and that will constitute a kind of TODO list (a\\'la GTD).</p> <p>Jaro Mail implements such functionalities: by pressing the [ F ] key (uppercase) one can flag an email, which will turn bright-green in the index. In addition to that there is a folder called remember/ where one can copy emails on the fly using the [ R ] key (uppercase) any time. Messages will be duplicated into the remember folder (which of course can be opened with the command jaro remember) so they can also be edited with annotations on the task they refer to, for instance using the [ e ] key, without affecting the original message.</p>"},{"location":"#workflow-in-brief","title":"Workflow in brief","text":"<p>Below a recapitulation of keys commonly used in our workflow</p> <p>Key       Function</p> <p>m     Compose a new message   Tab   Complete addresses and folders input   r     Reply to the sender of a message   d     Delete a message   y     Send a message (queue in outbox)   f     Forward a message to new recipients   =     List all filtered maildir folders   c     Change to another folder   F     Flag a message as important   R     Copy a message to remember   s     Move a message to another folder   C     Copy a message to another folder</p>"},{"location":"#searching","title":"Searching","text":"<p>Searching across all your emails it is as important as demanding of a task. Jaro Mail implements it using Notmuch which is relying on the Xapian search engine, completely relying on local computations made on your machine, there is no data at all being communicated on-line.</p> <p>To index and tag all your emails that are locally archived in Jaro Mail use:</p> <pre><code>jaro index\n</code></pre> <p>This will take a while and increase the size of the storage of about one sixth of its total occupation, but will definitely come useful when in need of searching rapidly across all available emails. To run a search for emails containing the \\'open source\\' string, do</p> <pre><code>jaro search open source\n</code></pre> <p>To search for all emails containing this string and dated between now and the last two weeks, do</p> <pre><code>jaro search open source date:2w..\n</code></pre> <p>The search command prints out a list of found filenames which may be useful to a script, but less useful to a human. In order to read a quick summary of the emails found it is possible to pipe the results into the headers command which will print out date, sender and subject of each file</p> <pre><code>jaro search open source date:2w.. | jaro headers\n</code></pre> <p>Searching has also an interactive interface called alot which pops up to show search results and browse through them, refine the terms and in general operate on emails with the usual keys. One can also reply to emails directly from alot:</p> <pre><code>jaro alot search expression strings folder:known\n</code></pre> <p>To restrict the search to a single folder, one can use the folder: prefix to search terms. Tags can be used also with tag: as well dates can be specified with ranges using date:. Consecutive string expressions are aloud to refine the search match, connected with logical and/or, plus also the header to search can be indicated, as for instance from: or to:. Read more about this below in the Search term and Date and time search sections (extracts from the notmuch-search-terms manpage) and on the notmuch webpage at http://notmuchmail.org</p> <p>With the addr command the search will be run on the whitelist addressbook entries instead of actual email contents.</p> <pre><code>jaro addr joe\n</code></pre> <p>Will list all addresses matching the string \\'joe\\' inside the whitelist addressbook. Also the blacklist can be searched this way adding the switch -l blacklist.</p>"},{"location":"#combining-terms","title":"Combining terms","text":"<p>In addition to individual terms, multiple terms can be combined with Boolean operators ( and, or, not , etc.). Each term in the query will be implicitly connected by a logical AND if no explicit operator is provided.</p> <p>Parentheses can also be used to control the combination of the Boolean operators, but will have to be protected from interpretation by the shell, (such as by putting quotation marks around any parenthesized expression).</p>"},{"location":"#search-terms","title":"Search terms","text":"<p>The search terms can consist of free-form text (and quoted phrases) which will match all messages that contain all of the given terms/phrases in the body, the subject, or any of the sender or recipient headers.</p> <p>As a special case, a search string consisting of exactly a single asterisk \\\"*\\\" will match all messages.</p> <p>In addition to free text, the following prefixes can be used to force terms to match against specific portions of an email, (where \\&lt;brackets&gt; indicate user-supplied values):</p> <pre><code>from:&lt;name-or-address&gt;\nto:&lt;name-or-address&gt;\nsubject:&lt;word-or-quoted-phrase&gt;\nattachment:&lt;word&gt;\ntag:&lt;tag&gt; (or is:&lt;tag&gt;)\nid:&lt;message-id&gt;\nthread:&lt;thread-id&gt;\nfolder:&lt;directory-path&gt;\ndate:&lt;since&gt;..&lt;until&gt;\n</code></pre> <p>The from: prefix is used to match the name or address of the sender of an email message.</p> <p>The to: prefix is used to match the names or addresses of any recipient of an email message, (whether To, Cc, or Bcc).</p> <p>Any term prefixed with subject: will match only text from the subject of an email. Searching for a phrase in the subject is supported by including quotation marks around the phrase, immediately following subject:.</p> <p>The / prefix can be used to search for specific filenames (or extensions) of attachments to email messages.</p> <p>For / and is: valid tag values include inbox and unread by default for new messages added by notmuch new as well as any other tag values added manually with notmuch tag.</p> <p>For id:, message ID values are the literal contents of the Message-ID: header of email messages, but without the \\'\\&lt;\\', \\'&gt;\\' delimiters.</p> <p>The thread: prefix can be used with the thread ID values that are generated internally by notmuch (and do not appear in email messages). These thread ID values can be seen in the first column of output from notmuch search</p> <p>The folder: prefix can be used to search for email message files that are contained within particular directories within the mail store. If the same email message has multiple message files associated with it, it\\'s sufficient for a match that at least one of the files is contained within a matching directory. Only the directory components below the top-level mail database path are available to be searched.</p>"},{"location":"#date-and-time-search","title":"Date and time search","text":"<p>See DATE AND TIME SEARCH below for details on the range expression, and supported syntax for \\&lt;since&gt; and \\&lt;until&gt; date and time expressions.</p> <p>The date: prefix can be used to restrict the results to only messages within a particular time range (based on the Date: header) with a range syntax of:</p> <pre><code>date:&lt;since&gt;..&lt;until&gt;\n</code></pre> <p>The syntax \\&lt;initial-timestamp&gt;..\\&lt;final-timestamp&gt; can be represented using the number of seconds since 1970-01-01 00:00:00 UTC.</p> <p>The search syntax also understands a variety of standard and natural ways of expressing dates and times, both in absolute terms \\'2012-10-24\\' and in relative terms \\'yesterday\\'. Any number of relative terms can be combined \\'1 hour 25 minutes\\' and an absolute date/time can be combined with relative terms to further adjust it. A non-exhaustive description of the syntax supported for absolute and relative terms is given below.</p>"},{"location":"#the-range-expression","title":"The range expression","text":"<pre><code>date:&lt;since&gt;..&lt;until&gt;\n</code></pre> <p>The above expression restricts the results to only messages from \\&lt;since&gt; to \\&lt;until&gt;, based on the Date: header.</p> <p>\\&lt;since&gt; and \\&lt;until&gt; can describe imprecise times, such as \\\"yesterday\\\". In this case, \\&lt;since&gt; is taken as the earliest time it could describe (the beginning of yesterday) and \\&lt;until&gt; is taken as the latest time it could describe (the end of yesterday). Similarly, date:january..february matches from the beginning of January to the end of February.</p> <p>Currently, we do not support spaces in range expressions. You can replace the spaces with \\'\\_\\', or (in most cases) \\'-\\', or (in some cases) leave the spaces out altogether. Examples in this man page use spaces for clarity.</p> <p>Open-ended ranges are supported (since Xapian 1.2.1), i.e. it\\'s possible to specify date:..\\&lt;until&gt; or date:\\&lt;since&gt;.. to not limit the start or end time, respectively.</p> <p>Entering date:expr without \\\"..\\\" (for example date:yesterday) won\\'t work, as it\\'s not interpreted as a range expression at all. You can achieve the expected result by duplicating the expr both sides of \\\"..\\\" (for example date:yesterday..yesterday).</p>"},{"location":"#relative-date-and-time","title":"Relative date and time","text":"<pre><code>[N|number]\n   (years|months|weeks|days|hours|hrs|minutes|mins|seconds|secs) [...]\n</code></pre> <p>All refer to past, can be repeated and will be accumulated.</p> <p>Units can be abbreviated to any length, with the otherwise ambiguous single m being m for minutes and M for months.</p> <p>Number can also be written out one, two, ..., ten, dozen, hundred. Additionally, the unit may be preceded by \\\"last\\\" or \\\"this\\\" (e.g., \\\"last week\\\" or \\\"this month\\\").</p> <p>When combined with absolute date and time, the relative date and time specification will be relative from the specified absolute date and time.</p> <p>Examples:</p> <pre><code>5M2d\n</code></pre> <pre><code>two weeks\n</code></pre>"},{"location":"#absolute-time-formats","title":"Absolute time formats","text":"<pre><code>H[H]:MM[:SS]\n[(am|a.m.|pm|p.m.)]\nH[H] (am|a.m.|pm|p.m.)\nHHMMSS\nnow\nnoon\nmidnight\n</code></pre> <p>Examples:</p> <pre><code>17:05\n</code></pre> <pre><code>5pm\n</code></pre>"},{"location":"#absolute-date-formats","title":"Absolute date formats","text":"<pre><code>YYYY-MM[-DD]\nDD-MM[-[YY]YY]\nMM-YYYY\nM[M]/D[D][/[YY]YY]\nM[M]/YYYY\nD[D].M[M][.[YY]YY]\nD[D][(st|nd|rd|th)] Mon[thname] [YYYY]\nMon[thname] D[D][(st|nd|rd|th)] [YYYY]\nWee[kday]\n</code></pre> <p>Month names can be abbreviated at three or more characters.</p> <p>Weekday names can be abbreviated at three or more characters.</p> <p>Examples:</p> <pre><code>2012-07-31\n</code></pre> <pre><code>31-07-2012\n</code></pre> <pre><code>7/31/2012\n</code></pre> <pre><code>August 3\n</code></pre>"},{"location":"#time-zones","title":"Time zones","text":"<pre><code>(+|-)HH:MM\n</code></pre> <pre><code>(+|-)HH[MM]\n</code></pre> <p>Some time zone codes.</p> <p>Examples:</p> <pre><code>UTC\nEET\n</code></pre>"},{"location":"#compute-and-visualize-statistics","title":"Compute and visualize statistics","text":"<p>The stats command is useful to quickly visualize statistics regarding folder usage as well the frequency of emails found in a stream from stdin. Such streams can be produced by the search and extract commands for instance and passed to stats in order to have a more graphical (yet ASCII based) visualization of results.</p> <p>For example lets visualize the frequency of email domain hosts in our whitelist:</p> <pre><code>jaro addr | jaro stat emails\n</code></pre> <p>Will print out bars and domains in descending order, highlighting the most frequent email domain in our contacts, which turns out to be very often gmail.com, unfortunately for our own privacy.</p> <p>To visualize the frequency of traffic across our filtered folders in the past month:</p> <pre><code>jaro search date:1w.. | jaro stat folders\n</code></pre> <p>Will show quantities of mails filed to folders during the past week, quickly highlighting the mailinglists that have seen more recent activity.</p> <p>To see who is most active in a mailinglist which is filtered to a folder:</p> <pre><code>jaro search folder:org.dyne.dng | jaro extract stdin from | jaro stat names\n</code></pre> <p>Will give an overview on who is the most prolific writer in the org.dyne.dng mailinglist, filed into the folder by a rule in Filters.txt like:</p> <pre><code>to    dng@lists.dyne       save         org.dyne.dng\n</code></pre> <p>Please note the extract command is there to extract email addresses and names found in the From: field of all search hits, the command is explained better in the next chapter: [Addressbook][]*.</p>"},{"location":"#replay-results-of-expensive-operations","title":"Replay results of expensive operations","text":"<p>Working on the commandline can have some disadvantages. One of them is that if one runs a long operation to see its result and forgets to save it also on a file (i.e. using tee) the operation needs to be re-run and saved.</p> <p>Jaro Mail helps the user to replay the last output print by saving it everytime in its own cache. Replay can also save per-command outputs so that long pipe chains can be repeated selectively by naming the command. Only some commands have the replay capability, to have a list of available replays on your system do, based on your last run commands:</p> <pre><code>jaro replay list\n</code></pre> <p>To replay the last search command and pipe it into headers to have a better view of it:</p> <pre><code>jaro replay search | jaro headers\n</code></pre> <p>For instance imagine giving the command that searches for all mails sent to nettime-l and extracts all addresses in the From: including duplicates, then sorts them and eliminates duplicates</p> <pre><code>jaro search to:nettime-l | jaro extract stdin from | sort | uniq\n</code></pre> <p>Depending from the size of your nettime archives, this operation may take some time and one may not want to repeat it in order to compute some stats on the extract result. So one can go on and send the old output to a new command:</p> <pre><code>jaro replay extract | jaro stat names\n</code></pre> <p>This will print out statistics about the most prolific write to the nettime list according to your archives.</p>"},{"location":"#statistics-in-brief","title":"Statistics in brief","text":"<p>All stats commands takes lists of addresses or email messages from stdin.</p> <p>command         effect</p> <p>stats email     reads addresses from stdin, prints out stats on frequency of emails found   stats names     reads addresses from stdin, prints out stats on frequency of names found   stats folders   reads paths to messages from stdin, prints out stats on frequency of folders</p> <p>So in case of stats email or stats names any result of search must be first filtered by extract in order to provide addresses to stats, else errors will occur. To limit the stats to the From: field use the extract stdin from also shown in examples, any other refinement can be done also in the domain of the search commands.</p>"},{"location":"#addressbook","title":"Addressbook","text":"<p>Addressbooks are the files storing the whitelist, the blacklist and optionally other custom lists of addresses. The format we use is native abook database files, by convention in \\$JAROMAILDIR/whitelist.abook and \\$JAROMAILDIR/blacklist.abook. More custom addressbooks can be used by specifying them using -l on the commandline, for instance -l family will query the \\$JAROMAILDIR/family.abook addressbook; when not used, whitelist is the default.</p> <p>Addressbooks can be edited using a interactive console interface, for instance to add or delete entries by hand: use the abook command and optionally the -l option.</p> <pre><code>jaro abook\n</code></pre> <p>This will open the current whitelist for edit. To edit the blacklist add -l blacklist instead.</p> <p>To quickly dump to the console all names and addresses in the Jaro Mail addressbook, one can use the list command</p> <pre><code>jaro list\n</code></pre> <p>To match a string across the addressbook, simply use the composite command addr followed by strings, for instance:</p> <pre><code>jaro addr dyne\n</code></pre> <p>will list all addresses containing \\'dyne\\' in your whitelist.</p>"},{"location":"#address-lists","title":"Address lists","text":"<p>Jaro Mail handles lists of addresses as plain text files or streams with entries formatted as \\'Name \\&lt;email&gt;\\' and newline terminated. This simple format conforms (or is normalized to) the RFC822 standard and UTF-8 charset encoding, both produced on stdout and read from stdin by various useful commands to take advantage of console piping.</p> <p>Such lists of addresses are the output of the extract command, which is able to read the output of other commands and extract a list of email addresses found.</p> <pre><code>jaro search open source date:2w..  | jaro extract stdin\n</code></pre> <p>Will print to stdout the list of addresses found among the results of a search for open source through all the emails archived in the past 2 weeks.</p> <pre><code>jaro search date:1y.. and folder:known | jaro extract\n</code></pre> <p>Will print a sorted list of unique addresses found in the emails matching the search expression \\'date:1y.. and folder:known\\', meaning all messages stored in the \\'known\\' folder and not older than 1 year from now.</p> <p>The import command is complementary to extraction: it reads an address list from stdin and imports it inside an addressbook specified using \\'-l\\' or a group list file provided as argument.</p> <pre><code>jaro search folder:unsorted | jaro extract | jaro import -l blacklist\n</code></pre> <p>Will extract all addresses found in unsorted (the maildir collecting all non-mailinglist emails in which we are not an explicit recipient) and put them into our blacklist.</p>"},{"location":"#export-to-vcard-and-other-formats","title":"Export to VCard and other formats","text":"<p>VCard is an exchange format useful to interface with other addressbook software and mobile phones, as well with spyware as Google and Apple mail. Jaro Mail supports converting address lists to a variety of formats thanks to abook:</p> <pre><code>jaro addr | jaro export vcard\n</code></pre> <p>Will take the list of addresses in whitelist and convert it to the vcard format on stdout, ready to be redirected to a file.</p> <p>Here below a list of output formats supported as argument to export:</p> <p>Format    Description</p> <p>abook     abook native format   ldif      ldif / Netscape addressbook (.4ld)   vcard     vCard 2 file   mutt      mutt alias   muttq     mutt query format (internal use)   html      html document   pine      pine addressbook   csv       comma separated values   allcsv    comma separated values (all fields)   palmcsv   Palm comma separated values   elm       elm alias   text      plain text   wl        Wanderlust address book   spruce    Spruce address book   bsdcal    BSD calendar   custom    Custom format</p> <p>Of course export works with any list of addresses from stdin, for instance the result of extract operations on search queries, so that multiple commands can be concatenated.</p>"},{"location":"#addressbook-in-brief","title":"Addressbook in brief","text":"<p>Here a roundup on the addressbook commands that are available from the jaro commandline script. Arguments \\'-l abook\\' take the string to identify</p> <p>Command       Arguments     Function (print on stdout, import from stdin)</p> <p>abook     -l listname   edit the addressbook (default whitelist)   addr      search expr   print list of addresses matching expression   extract   maildir       print address list of all mails in maildir   extract   gpg keyring   print address list of gpg public keyring   extract   gpg pubkey    print address list of gpg key signatures   extract   vcard file    print address list of entries in VCard file   import    -l listname   import address list from stdin to addressbook   export    format        convert address list to a format (default vcard)</p>"},{"location":"#filters","title":"Filters","text":"<p>In the mail directory a file named <code>Filters.txt</code> is filled in with filtering rules referencing the contents of the From: or To: fields.</p> <p>The format of the filters configurarion is pretty easy and self explanatory, just have a look at this file and when something changes update the filter engine using <code>jaro update</code>.</p> <p>Then use <code>jaro filter any-maildir/</code> and the mails contained in <code>any-maildir</code> will be moved according to the updated filter rules.</p> <p>Beware that filtering is a lengthy operation, especially on big maildirs.</p>"},{"location":"#merge-maildirs","title":"Merge maildirs","text":"<p>Mblaze can safely move all e-mails stored in one maildir to another.</p> <p><code>mlist latest-mails | mrefile global-archive</code></p> <p>The above command will move all emails stored inside the maildir folder <code>latest-mails</code> to the other maildir folder <code>global-archive</code>.</p>"},{"location":"#backup-mails","title":"Backup mails","text":"<p>Backup strategies can be easily managed: just move all emails older than a certain period from one maildir to another.</p> <p>Using jaromail search function with date we obtain a list of matches and process them using mblaze's <code>mrefile</code> command:</p> <p>For instance to move all archived mails older than 3 years into a separate folder:</p> <pre><code>jaro search date:3y.. | mrefile /media/backup/old-mails\n</code></pre> <p>This will move into the maildir <code>/media/backup/old.mails</code> all the emails older than 3 years that are found in any folder.</p> <p>One can also use jaro link to create symlinks into a new maildir: to review results without increasing filesystem occupation, then open the destination maildir normally using <code>neomutt -r -f destination/</code></p>"},{"location":"#security","title":"Security","text":"<p>We love to keep our own email private, this is how jaromail does it.</p>"},{"location":"#password-storage","title":"Password storage","text":"<p>Our MUA (Mutt), MTA (Fetchmail) and SMTP (msmtp) require the user to input account passwords every time they run, jeopardizing their secrecy.</p> <p>Jaromail saves and provides passwords to these components without saving them on the filesystem in clear: they are stored securely through password-store (also known as <code>pass</code>, the standard UNIX password manager). We save All passwords in the <code>$HOME/.password-store</code> GPG encrypted database under the <code>email/</code> path followed by the main account email.</p>"},{"location":"#secure-storage","title":"Secure storage","text":"<p>Jaromail is fully compatible with Tomb, the Crypto Undertaker ^4 another Dyne.org softwareto manage encrypted volumes.</p> <p>Using a light combination of scripts between Jaromail and Tomb is possible to achieve a strong level of personal security, definitely above the average.</p> <p>In particular, Jaro Mail does not needs system-wide installation, but can be installed and used in a way that makes it totally self-contained and transportable across systems inside a Tomb.</p>"},{"location":"#anonymous-emails","title":"Anonymous emails","text":"<p>To send an anonymous email just change the From: header field to <code>anon@mixmaster</code>.  Our application will recognize that as a request to send the email across the MixMaster anonymous network.</p> <p>To change From: in Mutt: after composition, when headers and attachments are shown, press ESC and then f, then type the special sender address <code>anon@mixmaster</code> and press [Enter].</p>"},{"location":"#shell-environment","title":"Shell environment","text":""},{"location":"#zsh-commandline-completion","title":"Zsh commandline completion","text":"<p>For Zsh users out there there is a completion recipe that can facilitate the use of Jaro Mail by adding tab completion on the console terminal: commands and accounts will be listed and completed automatically just like with other commands.</p> <p>To activate the completion move the file src/completion/_jaromail into the path where zsh loads vendor completions, typically that is /usr/share/zsh/vendor-completions.</p>"},{"location":"#quickly-send-a-file-via-email-on-appleosx","title":"Quickly send a file via email on Apple/OSX","text":"<p>To right-click on a file and send it via email attach using Jaro Mail you must create a \\\"Service\\\" using the application \\\"Automator\\\". It is fairly simple:</p> <ol> <li>Start Automator</li> <li>Choose the Service template</li> <li>In the dropdown boxes that appear choose \\\"files or folders\\\" and     \\\"Finder\\\"</li> <li>Look for \\\"Run Applescript\\\" in the Library tree</li> <li>Drag \\\"Run Applescript\\\" in the workflow area and paste this script     into it:</li> </ol> <pre><code>on run {input, parameters}\n    tell application \"Terminal\"\n        activate\n        tell window 1\n            do script \"/Applications/JaroMail.app/Contents/Resources/jaro/bin/jaro \" &amp; POSIX path of input\n        end tell\n    end tell\nend run\n</code></pre> <p>Now Save the new service (you can name it \\\"Send file via Jaro Mail\\\") and when you will right click on a file, in the submenu \\\"Services\\\" you will find the option you just scripted, which will open a Terminal asking you the email address, while the file will be already configured as attach.</p>"},{"location":"#license","title":"License","text":"<p>The following copyright notice applies to this manual, the software included is licensed under the same or different GNU GPL or BSD licenses, or available in the public domain.</p> <pre><code>Copyleft (C) 2010-2023 Denis Roio &lt;jaromil@dyne.org&gt;\n\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3 or\nany later version published by the Free Software Foundation;\nPermission is granted to make and distribute verbatim copies of this\nmanual page provided the above copyright notice and this permission\nnotice are preserved on all copies.\n</code></pre> <p>[^1]: The Mutt configuration manual is found on     http://www.mutt.org/doc/manual or simply typing \\'man mutt\\' in a     console terminal.</p> <pre><code>What this virtuous, sometimes very cryptical man is trying to say\nhere is that the Maildir format in its simplicity of implementation\nrepresents an extremely reliable way to retreive and store emails\nwithout the risk of losing any if the Internet connection goes down.\n\nWhile skipping over the internal details of this storage system,\nwhich basically consists in plain text files saved into\nsub-directories, we will have a look at some very interesting\nfeatures that Jaro Mail can offer to its users and to the even\nlarger audience of Maildir format users.\n</code></pre> <p>[^3]: The keyring is encrypted using weak symmetric encryption via     GnuPG, the only protection for the data inside then is the password     memorized by the used.</p> <pre><code>To explicitly change a password one can operate the default keyring\nmanager or use the command **jaro passwd** (and specify other\nacconts using **-a accountname**)) which will prompt to set for a\nnew password even if an old one is known.\n</code></pre>"}]}